/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */
 
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'

    // Use JUnit test framework
   // testImplementation 'junit:junit:4.12'
    
    testImplementation 'org.testng:testng:7.2.0'
    
    //testImplementation 'io.rest-assured:json-path:4.3.0'
    
    testCompile group: 'io.rest-assured', name: 'rest-assured', version: '4.3.0'
}

test {
	//environment 'Chrome', 'C://Program Files (x86)//Jenkins//tools//chromedriver//chromedriver.exe'
    // Use TestNG for unit tests
    useTestNG(){
    	suites 'testng.xml'
    	outputDirectory = file("$project.buildDir//testngReports")
    	useDefaultListeners = true
    }
    reports.html.setDestination(file("$buildDir//GradleReports"))
    reports.html.enabled = true
    ignoreFailures = true
    
    testLogging {
        events "PASSED", "FAILED", "SKIPPED", "STANDARD_OUT"
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
       		events	"STARTED", "FAILED", "PASSED", "SKIPPED", "STANDARD_ERROR", "STANDARD_OUT"
            /**events TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT
            */
            exceptionFormat TestExceptionFormat.FULL
        }
        
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat
        
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
	}
}